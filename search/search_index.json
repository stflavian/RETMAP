{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Warning</p> <p>The documentation is still being worked on! Not all information is accurate!</p> <ul> <li> <p> Easy to set up</p> <p>Install <code>retmap</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on GitHub</p> <p> License</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on GitHub</p> <p> License</p> </li> <li> <p> Open Source, MIT</p> <p>RETMAP is licensed under MIT and available on GitHub</p> <p> License</p> </li> </ul>"},{"location":"about/","title":"About","text":"<p>RETMAP is a Python application for computing and predicting characteristic curves and  isotherms from experimental and simulated data. The project started development during  Flavian's Bachelor's End Project at Eindhoven University of Technology. </p> <p>Authors: Flavian Stavarache, Azahara Luna-Triguero, Sofia Calero,  Jose Manuel Vicent-Luna</p> <p>Institution: Eindhoven University of Technology</p> <p>Department: Applied Physics and Science Education</p>"},{"location":"contact/","title":"Contact","text":"<p>If you have any questions about the software or if you encountered any issues when using it, please don't hesitate to reach out to us. The project is in its early phase so there may still be many undetected issues. </p> <p>In case you want to contribute to the project, feel free to work on any of the active issues listed on the GitHub page, or to implement features that you would like to use in your work or research. </p> <p>If the matter at hand is not urgent, we recommend that you open an issue on the GitHub  page of the project in which you can describe your problem or inquiry. This would make it easier to keep track of the bugs found and the requested features.</p> <p>In case you are experiencing issues that require immediate attention, send an e-mail to the developer at f.stavarache@student.tue.nl.</p>"},{"location":"installation/","title":"Installation","text":"<p>Warning</p> <p>This page is out of date. The information presented below is no longer correct.</p> <p>Adsorpyon is an application built using Python 3.7, meaning that it should be compatible with most Python versions in use at the moment. In terms of libraries, adsorpyon is built using Numpy, Scipy, and Matplotlib, all of which should be installed on the machine for the application to work. </p> <p>To decrease the chances of errors, it is recommended that the application is run inside  a Python virtual environment containing  the exact versions of the libraries listed in the <code>requirements.txt</code> file. Also, since  the application was created in Linux, little to no testing has been done on Windows.  For this reason, we encourage you to install adsorpyon inside  Windows Subsystem for Linux  or to contact us in case any unexpected bugs are encountered.</p>"},{"location":"installation/#install-python-and-download-adsorpyon","title":"Install Python and download adsorpyon","text":"<ul> <li>Download and install Python 3.7 or a more recent version from the  official website.</li> <li>Verify the installation by opening a terminal and typing <code>python --version</code>. The  output should display the version of Python you just installed.</li> <li>Use <code>git clone https://github.com/stflavian/adsorpyon.git</code> or download the .zip file containing the code to your desired location and unzip the archive. </li> </ul>"},{"location":"installation/#create-a-virtual-environment","title":"Create a virtual environment","text":"<p>This step is not necessary in case you already have Numpy, Scipy, and Matplotlib  installed globally on your Python version. Still, we highly recommend that you  install these libraries inside a virtual environment to minimize the chance of errors.</p> <ul> <li>Using the terminal, create a virtual environment for your project by running  <code>python -m venv env</code> in your project directory. This will create a new directory called  env that contains a copy of the Python interpreter and pip package manager.</li> <li>Activate the virtual environment by running <code>source env/bin/activate</code> on Linux/MacOS or  <code>env\\Scripts\\activate.bat</code> on Windows.</li> </ul> <p>Note</p> <p>Make sure that the Python virtual environment is active during the next step of the  installation and when using the code. When the environment is active, its name is  displayed before the terminal prompt inside parenthesis, e.g. <code>(env) John@PC: ~</code>.</p>"},{"location":"installation/#install-requirements-and-set-up-the-runpy-file","title":"Install requirements and set up the run.py file","text":"<ul> <li>Install dependencies by running <code>pip install -r requirements.txt</code> in your project  directory. This will install all the packages listed in the <code>requirements.txt</code> file.</li> <li>Open the <code>run.py</code> file found in the <code>/examples/run</code> folder.</li> <li>Change the path in line 4 from <code>\"/home/user/path/to/adsorpyon\"</code> to the path in which  you downloaded adsorpyon, e.g. <code>\"/home/john/Desktop/adsorpyon\"</code> on Linux or  <code>C:\\Users\\John\\Desktop\\adsorpyon</code> on Windows.</li> </ul> <p>Note</p> <p>Make sure to use the updated version of the <code>run.py</code> when creating new working  folders. </p>"},{"location":"license/","title":"License","text":"<p>Copyright (c) 2024 Flavian Stavarache, Azahara Luna-Triguero, Sofia Calero,  Jose Manuel Vicent-Luna</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"release_notes/","title":"Release notes","text":""},{"location":"release_notes/#10a1","title":"1.0a1","text":"<p>This is the alpha version of RETMAP, featuring new file formats, unit conversions, extended prediction algorithms, improved plotting and much more. This version is still in development and may contain many bugs.</p>"},{"location":"release_notes/#bachelors-end-project-edition-pre-release","title":"Bachelor's End Project Edition (Pre-release)","text":"<p>This edition represents the code used for the completion of the Bachelor's End Project  of Flavian Stavarache, under the supervision of Jose Manuel Vicent-Luna and Sofia Calero  at Eindhoven Univeristy of Technology. This release is not meant for general usage.</p> <p>The program in this release is able to convert adsorption isotherms to characteristic  curves, predict adsorption isotherms, and analyze the results and predictions.</p>"},{"location":"usage/","title":"How to use","text":"<p>Warning</p> <p>This page is out of date. The information presented below is no longer correct.</p> <p>RETMAP is a command line application, meaning that it is intended to be used solely from a terminal. </p> <ul> <li>Copy the updated <code>run.py</code> file to your working folder.</li> <li>Copy the adsorption data that needs to be processed to the working folder.</li> <li>Create the properties file for the molecule used to obtain the adsorption data.  </li> <li>Create the <code>config.in</code> file in the same folder and add the necessary information needed for the application to run.</li> <li>Activate the virtual environment containing the needed libraries for the  application to run.<sup>1</sup></li> <li>Run the application using <code>./run.py</code> on Linux/MacOS or <code>python run.py</code> on any  platform.</li> </ul> <p>Note</p> <p>Depending on the settings you use in <code>config.in</code> the application will create separate folders for plots and written output. To keep the working folder clean it is recommended that you also place the adsorption data and the properties file in a folder named <code>Input</code>.</p> <p>There is no notification or update tracker implemented in the application at the  moment. The application will stop once it completes all the tasks mentioned in  <code>config.in</code>, or once it encounters an error in the program. The application creates files and plots in sequence, meaning that files will be created as the code is running.</p> <p>Since the configuration file is written in plain text, it is easy to integrate the  application inside other shell scripts to automate the processing procedure. </p> <ol> <li> <p>This step is not necessary in case you already have Numpy, Scipy, and Matplotlib  installed globally on your Python version. Still, we highly recommend that you  install these libraries inside a virtual environment to minimize the chance of errors.\u00a0\u21a9</p> </li> </ol>"},{"location":"examples/example_1/","title":"Example 1","text":"<p>asd</p>"},{"location":"manual/characteristic_curves/","title":"Computing characteristic curves","text":"<p>The most important feature of RETMAP is the ability to compute adsorption characteristic  curves based on the adsorption properties provided. </p> <p><code>COMPUTE_CHARACTERISTIC_CURVE</code> (default: no, type: String)</p> <p>Specify if characteristic curves should be computed for all input files provided. For the computing process, saturation pressure models and density models should be specified using the keywords <code>ADSORBATE_SATURATION_PRESSURE</code> and <code>ADSORBATE_DENSITY</code>.</p> <p>Options: yes, no</p> <p><code>SAVE_CHARACTERISTIC_CURVE_DATA</code> (default: no, type: String)</p> <p>Specify if the resulting characteristic curves should be written to files.</p> <p>Options: yes, no</p> <p><code>PLOT_CHARACTERISTIC_CURVE</code> (default: yes, type: String)</p> <p>Specify if the resulting characteristic curves should be plotted.    </p> <p>Options: yes, no</p> <p><code>SAVE_CHARACTERISTIC_CURVE_PLOT</code> (default: no, type: String)</p> <p>Specify if the characteristic cruve plot should be saved inside the Plots  directory. </p> <p>Options: yes, no</p>"},{"location":"manual/configuration_file/","title":"Configuration file","text":"<p>When running <code>retmap</code>, the only required argument is the name of the configuration file,  usually called <code>config.in</code>. This contains all the information needed by the application  to run, such as the location of the needed files and the expected output.</p> <p>The configuration file is a plain text file structured as:</p> <pre><code>KEY_WORD           argument\n</code></pre> <p>where <code>KEY_WORD</code> represents the option needed to be edited and <code>argument</code> the respective option. The distance between the two entries should be at least one empty space. In case multiple entries are needed (e.g. when multiple data files should be processed at the  same time), the arguments should be added on the same line with at least one space in between them.</p> <pre><code>KEY_WORD           argument1  argument2  ...  argumentN\n</code></pre> <p>In case multiple data files are processed at the same time, the user can choose to use either the same number of arguments for all settings or only one argument. In the later case it is assumed that all the arguments should take the same value.</p> <pre><code>KEY_WORD1          argument1  argument2  ...  argumentN\nKEY_WORD2          argument1 (argument1) ... (argument1) \n</code></pre> <p>There are however a few special keys that do not abide by this rule (e.g. those that denote ranges, prediction parameters, etc.), which will be discussed in their respective parts.</p> <p>To allow for easy organization of the <code>config.in</code> file, empty lines can be used to  separate different settings blocks. Also, if the first word of the line is not in the  list of recognized key-words, the line will be ignored. This behaviour allows for  comments to be used inside the configuration file, with little limitations. Still, it  is recommended that comments start with some sequence of symbols (e.g. <code>//</code>) to ensure that the first word does not match an implemented key-word. This is also good for future proofing, as no key-words starting with symbols are planned to be implemented.</p> <pre><code>// This is the first block of settings\nKEY_WORD1          argument1  argument2  ...  argumentN\nKEY_WORD2          argument1\n\n// This is the second block of settings\nKEY_WORD3          argument1\n</code></pre> <p>Both key-words and arguments are case-sensitive, with the former written in uppercase and the latter in lower case. For the boolean clauses (a.i. those that evaluate for either <code>True</code> or <code>False</code>), <code>yes</code> represents <code>True</code> while any other string represents <code>False</code>. However, it is recommended that <code>no</code> is used for false to future-proof the file.</p>"},{"location":"manual/density/","title":"Density","text":"<p><code>ADSORBATE_DENSITY</code> (default: None, type: String)</p> <p>Specifies the density model used for the calculations. This keyword can take as many  arguments as the number of input files provided. However, since the keyword  <code>DENSITY_FILE</code> can only take one argument, using the extrapolation method multiple  times would produce the same results. </p> <p>Options: empirical, hauer, ozawa, extrapolation</p> <p><code>DENSITY_FILE</code> (default: None, type: String)</p> <p>The path towards the file that contains the density data. This keyword accepts only  one argument. If the argument provided is local, the program will search its  internal library for pre-made density data file based on the argument given to the  <code>ADSORBATE</code> keyword. </p> <p><code>THERMAL_EXPANSION_COEFFICIENT</code> (default: 0.00165, type: Float)</p> <p>The thermal expansion coefficient used for the hauer and ozawa models.</p>"},{"location":"manual/density/#computing-density-curves","title":"Computing density curves","text":"<p><code>COMPUTE_DENSITY_CURVE</code> (default: no, type: String)</p> <p>Specify if a density curve should be computed and saved using the first calculation  method provided to <code>ADSORBATE_DENSITY</code>.</p> <p>Options: yes, no</p> <p><code>DENSITY_RANGE</code> (default: None, type: Tuple{Float})</p> <p>The range in which the density is computed.</p> <p><code>NUMBER_DENSITY_POINTS</code> (default: 50, type: Integer)</p> <p>The number of points used to for computing the density curve.</p>"},{"location":"manual/input_data_file/","title":"Input data files","text":"<p>Inside the configuration file, the first keyword used should always be <code>DATA_FILES</code>, as the number of arguments provided here dictates the number of data structures crated for storage. Data files contain information that is used to recreate adsorption properties,  such as isotherms, isobars, isosteres, and characteristic curves. While the main format  used for data files is the two-column format, which works for all the aforementioned  data types, isotherms can also be provided in a variety of formats depending on the fitting equation used. </p> <p><code>DATA_FILES</code> (default: None, type: String)</p> <p>The paths towards the input files used for calculations. This keyword accepts an arbitrary number of arguments.</p>"},{"location":"manual/input_data_file/#supported-data-types","title":"Supported data types","text":"<p><code>DATA_TYPES</code> (default: None, type: String)</p> <p>The format of the input file. If only one argument is provided, it is assumed that  all input files have the same format. Alternatively, mixed input types can be provided.</p> <p>Options: isotherm, isobar, isostere, characteristic, langmuir,  n-langmuir, bet, anti-langmuir, henry, freundlich, sips, n-sips,  langmuir-freundlich, n-langmuir-freundlich, redlich-peterson, toth, unilan,  obrien-myers, quadratic, asymptotic-temkin, bingel-walton</p>"},{"location":"manual/input_data_file/#two-column-files","title":"Two-column files","text":"<p>Two-column files are the simplest and most common way to provide data, as they are easy to read and work with. The first line of a two-column file should always contain a comment, most often used to specify the values recorded and the measurement units. The data is read by parsing each line after the comment. Only the first two entries of each  line are stored, with the rest being ignored.</p> <p>For isotherms, the first column should contain the pressure and the second column should  contain the loading. For isobars, the first column should contain the temperature and the  second column should contain the loading. For isosteres, the first column should contain  the temperature and the second column should contain the pressure. For characteristic  curves, the first column should contain the adsorption potential and the second column  should contain the adsorbed volume.</p> two_column_file.dat<pre><code># first line is a comment line\nprop_1  prop_2  (skipped entries)\nprop_1  prop_2  (skipped entries)\n</code></pre>"},{"location":"manual/input_data_file/#langmuir-isotherm","title":"Langmuir isotherm","text":"\\[ q(p) = q_{sat} \\frac{b p}{1 + b p} \\] langmuir_isotherm.dat<pre><code>p_min   p_max   num\nq_sat\nb\n</code></pre>"},{"location":"manual/input_data_file/#n-site-langmuir-isotherm","title":"n-site Langmuir isotherm","text":"\\[ q(p) = \\sum^{n}_{i=1} q_{sat, i} \\frac{b_{i} p}{1 + b_{i} p} \\] n_langmuir_isotherm.dat<pre><code>p_min   p_max   num\nq_sat_1 q_sat_2 ...\nb_1     b_2     ...\n</code></pre>"},{"location":"manual/input_data_file/#anti-langmuir-isotherm","title":"anti-Langmuir isotherm","text":"\\[ q(p) = \\frac{a p}{1 - b p} \\] anti_langmuir_isotherm.dat<pre><code>p_min   p_max   num\na\nb\n</code></pre>"},{"location":"manual/input_data_file/#bet-isotherm","title":"BET isotherm","text":"\\[ p_{r} = p / p_{0} \\] \\[ q(p_{r}) = q_{sat} \\frac{b p_{r}}{(1 - c p_{r})(1 - c + b p_{r})} \\] bet_isotherm.dat<pre><code>p_min   p_max   num\np_0\nq_sat\nb\nc\n</code></pre>"},{"location":"manual/input_data_file/#henry-isotherm","title":"Henry isotherm","text":"\\[ q(p) = a p \\] henry_isotherm.dat<pre><code>p_min   p_max   num\na\n</code></pre>"},{"location":"manual/input_data_file/#freundlich-isotherm","title":"Freundlich isotherm","text":"\\[ q(p) = a p^{1/\\nu} \\] freundlich_isotherm.dat<pre><code>p_min   p_max   num\na\nnu\n</code></pre>"},{"location":"manual/input_data_file/#sips-isotherm","title":"Sips isotherm","text":"\\[ q(p) = q_{sat} \\frac{(b p)^{1/\\nu}}{1 + (b p)^{1/\\nu}} \\] sips_isotherm.dat<pre><code>p_min   p_max   num\nq_sat\nb\nnu\n</code></pre>"},{"location":"manual/input_data_file/#n-site-sips-isotherm","title":"n-site Sips isotherm","text":"\\[ q(p) = \\sum^{n}_{i=1} q_{sat, i} \\frac{(b_{i} p)^{1/\\nu_{i}}}{1 + (b_{i} p)^{1/\\nu_{i}}} \\] n_sips_isotherm.dat<pre><code>p_min   p_max   num\nq_sat_1 q_sat_2 ...   \nb_1     b_2     ...\nnu_1    nu_2    ...\n</code></pre>"},{"location":"manual/input_data_file/#langmuir-freundlich-isotherm","title":"Langmuir-Freundlich isotherm","text":"\\[ q(p) = q_{sat} \\frac{b p^{\\nu}}{1 + b p^{\\nu}} \\] langmuir_freundlich_isotherm.dat<pre><code>p_min   p_max   num\nq_sat \nb\nnu\n</code></pre>"},{"location":"manual/input_data_file/#n-site-langmuir-freundlich-isotherm","title":"n-site Langmuir-Freundlich isotherm","text":"\\[ q(p) = \\sum^{n}_{i=1} q_{sat, i} \\frac{b_{i} p^{\\nu_{i}}}{1 + b_{i} p^{\\nu_{i}}} \\] n_langmuir_freundlich_isotherm.dat<pre><code>p_min   p_max   num\nq_sat_1 q_sat_2 ... \nb_1     b_2     ...\nnu_1    nu_2    ...\n</code></pre>"},{"location":"manual/input_data_file/#redlich-peterson-isotherm","title":"Redlich-Peterson isotherm","text":"\\[ q(p) = \\frac{a p}{1 + b p^{\\nu}} \\] redlich_peterson_isotherm.dat<pre><code>p_min   p_max   num\na\nb\nnu\n</code></pre>"},{"location":"manual/input_data_file/#toth-isotherm","title":"Toth isotherm","text":"\\[ q(p) = q_{sat} \\frac{b p}{[1 + (b p)^{\\nu}]^{1/\\nu}} \\] toth_isotherm.dat<pre><code>p_min   p_max   num\nq_sat\nb\nnu\n</code></pre>"},{"location":"manual/input_data_file/#unilan-isotherm","title":"Unilan isotherm","text":"\\[ q(p) = q_{sat} \\frac{1}{2 \\eta} \\ln{\\left[\\frac{1 + b e^{\\eta} p}{1 + b e^{-\\eta} p}\\right]} \\] unilan_isotherm.dat<pre><code>p_min   p_max   num\nq_sat\nb\neta\n</code></pre>"},{"location":"manual/input_data_file/#obrien-myers-isotherm","title":"O'Brien &amp; Myers isotherm","text":"\\[ q(p) = q_{sat} \\left[ \\frac{b p}{1 + b p} + \\sigma^{2} \\frac{b p(1 - b p)}{2(1 + b p)^{3}} \\right] \\] obrien_myers_isotherm.dat<pre><code>p_min   p_max   num\nq_sat\nb\nsigma\n</code></pre>"},{"location":"manual/input_data_file/#quadratic-isotherm","title":"Quadratic isotherm","text":"\\[ q(p) = q_{sat} \\frac{b p + 2 c p^{2}}{1 + b p + c p^{2}}  \\] quadratic_isotherm.dat<pre><code>p_min   p_max   num\nq_sat\nb\nc\n</code></pre>"},{"location":"manual/input_data_file/#asymptotic-temkin-isotherm","title":"Asymptotic Temkin isotherm","text":"\\[ f(p) = \\frac{b p}{1 + b p}  \\] \\[ q(p) = q_{sat} f(p) + g_{sat} \\theta f(p)^{2} (f(p) - 1) \\] asymptotic_temkin_isotherm.dat<pre><code>p_min   p_max   num\nq_sat\nb\ntheta\n</code></pre>"},{"location":"manual/input_data_file/#bingel-walton-isotherm","title":"Bingel &amp; Walton isotherm","text":"\\[ q(p) = q_{sat} \\frac{1 - \\exp{[-(a+b)p]}}{1+ b/a \\exp{[-(a+b)p]}} \\] bingel_walton_isotherm.dat<pre><code>p_min   p_max   num\nq_sat\na\nb\n</code></pre>"},{"location":"manual/input_data_file/#identifiers","title":"Identifiers","text":"<p>Depending on the type of the data files. additional information is required to process the data (e.g. the temperature at which the isotherm is measured). This is done by  using the following keywords, which can be referred to as identifiers. Identifiers are mandatory and serve a variety of purposes, from being used in the calculations to  helping with labeling in plots or written files. </p> <p><code>ADSORBATE</code> (default: None, type: String)</p> <p>The name of the adsorbate studied. This keyword can only take one value, which is primarely used for naming output files and plots. Morover, it serves as a serching term inside the local library in case the keywords <code>ADSORBATE_DATA_FILE</code>. <code>SATURATION_PRESSURE_FILE</code>, <code>DENSITY_FILE</code> or  receive the argument <code>local</code>. </p> <p><code>ADSORBENT</code> (default: None, type: String)</p> <p>The name of the adsorbent studied. This keyword can only take one value, which is only used for naming output files and plots.</p> <p><code>LOADINGS</code> (default: None, type: Float)</p> <p>The loadings at which the isosteres are measured. This keyword should take as many arguments as the number of data files provided. If mixed data types are used, placeholder values should be provided for the non-isostere entries.</p> <p><code>PRESSURES</code> (default: None, type: Float)</p> <p>The pressures at which the isobars are measured. This keyword should take as many arguments as the number of data files provided. If mixed data types are used, placeholder values should be provided for the non-isobar entries.</p> <p><code>TEMPERATURES</code> (default: None, type: Float)</p> <p>The temperatures at which the isosteres are measured. This keyword should take as  many arguments as the number of data files provided. If mixed data types are used, placeholder values should be provided for the non-isotherm entries.</p>"},{"location":"manual/input_data_file/#plotting-data","title":"Plotting data","text":"<p>In some cases, it is helpful to plot the input data to use it as a reference for the  results computed. Below, a list of keywords that affect plotting is provided. </p> <p><code>PLOT_DATA</code> (default: no, type: String)</p> <p>Specifies if the input data should be plotted. Keep in mind that plotting the data  does not entail that the plot is immediately displayed or saved. It is technically possible to plot the data and then ignore the resulting plot, so the user has to  pay attention to the keywords used.</p> <p>Options: yes, no</p> <p><code>LOGARITHMIC_PLOT</code> (default: no, type: String)</p> <p>Specifies if the x-axis of the plot should be in logarithmic scale. This only affects isotherms. </p> <p>Options: yes, no</p> <p><code>SAVE_DATA_PLOT</code> (default: no, type: String)</p> <p>Specifies if the plot should be saved inside the Plots directory. </p> <p>Options: yes, no</p> <p><code>SHOW_PLOTS</code> (default: no, type: String)</p> <p>Specifies if a pop up with all of the created plots is displayed. This keyword affects all of the plots created throughout the run. </p> <p>Options: yes, no</p>"},{"location":"manual/predicting_data/","title":"Prediction-making","text":""},{"location":"manual/predicting_data/#isotherm-prediction","title":"Isotherm prediction","text":"<p><code>PREDICT_ISOTHERMS</code> (default: no, type: String)</p> <p>Specify if isotherms should be predicted using the first characteristic curve  provided or computed.</p> <p>Options: yes, no</p> <p><code>PREDICTION_TEMPERATURES</code> (default: None, type: Array{Float})</p> <p>The temperatures at which the isotherms should be computed.    </p> <p><code>PREDICTION_PRESSURE_RANGE</code> (default: None, type: Tuple{Float})</p> <p>The pressure range covered by the isotherms. If the values provided are out of reach, the program will fallback to the minimum and maximum pressures that can be reached for the given adsorption potential range.</p> <p><code>NUMBER_PRESSURE_POINTS</code> (default: 50, type: Integer)</p> <p>The number of points used for the isotherm.</p> <p><code>SAVE_PREDICTED_ISOTHERMS_DATA</code> (default: no, type: String)</p> <p>Specify if the predicted isotherms should be written to files.</p> <p>Options: yes, no</p> <p><code>PLOT_PREDICTED_ISOTHERMS</code> (default: yes, type: String)</p> <p>Specify if the predicted isotherms should be plotted.  </p> <p>Options: yes, no</p> <p><code>SAVE_PREDICTED_ISOTHERMS_PLOT</code> (default: no, type: String)</p> <p>Specify if the predicted isotherms plot should be saved inside the Plots  directory. </p> <p>Options: yes, no</p>"},{"location":"manual/predicting_data/#isobar-prediction","title":"Isobar prediction","text":"<p><code>PREDICT_ISOBARS</code> (default: no, type: String)</p> <p>Specify if isobars should be predicted using the first characteristic curve  provided or computed.</p> <p>Options: yes, no</p> <p><code>PREDICTION_PRESSURES</code> (default: None, type: Array{Float})</p> <p>The pressures at which the isobars should be computed.    </p> <p><code>PREDICTION_TEMPERATURE_RANGE</code> (default: None, type: Tuple{Float})</p> <p>The temperature range covered by the isobars. If the values provided are out of reach, the program will fallback to the minimum and maximum temperatures that can be reached for the given adsorption potential range.</p> <p><code>NUMBER_TEMPERATURE_POINTS</code> (default: 50, type: Integer)</p> <p>The number of points used for the isobars.</p> <p><code>SAVE_PREDICTED_ISOBARS_DATA</code> (default: no, type: String)</p> <p>Specify if the predicted isobars should be written to files.</p> <p>Options: yes, no</p> <p><code>PLOT_PREDICTED_ISOBARS</code> (default: yes, type: String)</p> <p>Specify if the predicted isobars should be plotted.  </p> <p>Options: yes, no </p> <p><code>SAVE_PREDICTED_ISOBARS_PLOT</code> (default: no, type: String)</p> <p>Specify if the predicted isobars plot should be saved inside the Plots  directory. </p> <p>Options: yes, no</p>"},{"location":"manual/predicting_data/#isostere-prediction","title":"Isostere prediction","text":"<p><code>PREDICT_ISOSTERES</code> (default: no, type: String)</p> <p>Specify if isosteres should be predicted using the first characteristic curve  provided or computed.</p> <p>Options: yes, no</p> <p><code>PREDICTION_LOADINGS</code> (default: None, type: Array{Float})</p> <p>The loadings at which the isosteres should be computed.    </p> <p><code>PREDICTION_ISOSTERE_RANGE</code> (default: None, type: Tuple{Float})</p> <p>The temperature range covered by the isosteres. If the values provided are out of reach, the program will fallback to the minimum and maximum temperatures that can be reached for the given adsorbed volume range.</p> <p><code>NUMBER_ISOSTERE_POINTS</code> (default: 50, type: Integer)</p> <p>The number of points used for the isosteres.</p> <p><code>SAVE_PREDICTED_ISOSTERES_DATA</code> (default: no, type: String)</p> <p>Specify if the predicted isosteres should be written to files.</p> <p>Options: yes, no </p> <p><code>PLOT_PREDICTED_ISOSTERES</code> (default: yes, type: String)</p> <p>Specify if the predicted isosteres should be plotted.  </p> <p>Options: yes, no</p> <p><code>SAVE_PREDICTED_ISOSTERES_PLOT</code> (default: no, type: String)</p> <p>Specify if the predicted isosteres plot should be saved inside the Plots  directory. </p> <p>Options: yes, no</p>"},{"location":"manual/properties_file/","title":"Properties file","text":"<p>When processing adsorption data, molecular properties are required for preforming most calculations. These molecular properties are usually stored in a properties file, which is then provided to the configuration file using the key word  <code>ADSORBATE_DATA_FILE</code>. Properties files follow the same structure as configuration files, and are usually saved using the <code>.prop</code> file extension.</p> <p><code>ADSORBATE_DATA_FILE</code> (default: None, type: String)</p> <p>The path towards the file that contains the molecular properties. This keyword  accepts only one argument. If the argument provided is local, the program will search its internal library for pre-made properties file based on the argument given to the <code>ADSORBATE</code> keyword. </p> <p>The interpreter allows for one or more keywords to be skipped inside the properties  files. Should that happen, individual warnings are raised during the run for each  individual missing keyword. Moreover, if one of the missing keywords is required for  calculations, the program will fail.</p> <p>The following keywords should be provided, in no particular order, inside the  properties files:</p> <p><code>NAME</code> (default: None, type: String)</p> <p>The name of the molecule for which the properties are provided. This string is not used in the code and is only provided for readability reasons.</p> <p><code>MOLECULAR_MASS</code> (default: None, type: Float)</p> <p>The molecular mass of the molecule in g/mol. This value is used for unit conversion.</p> <p><code>PRESSURE_CRITICAL</code> (default: None, type: Float)</p> <p>The pressure at the critical point in MPa. This value is used in most saturation  pressure models.</p> <p><code>TEMPERATURE_CRITICAL</code> (default: None, type: Float)</p> <p>The temperature at the critical point in K. This value is used in most saturation pressure models. </p> <p><code>TEMPERATURE_BOILING</code> (default: None, type: Float)</p> <p>The temperature at the boiling point in K. This value is used in some saturation pressure models and most density models.</p> <p><code>DENSITY_BOILING</code> (default: None, type: Float)</p> <p>The density at the boiling point in kg/m3. This value is used in most density models. </p> <p><code>ACENTRIC_FACTOR</code> (default: None, type: Float)</p> <p>The acentric factor of the molecule. This value is used in the Peng-Robinson  equation, PRSV, and PRSV2. </p> <p><code>PRSV_KAPPA1</code> (default: None, type: Float)</p> <p>The first fitting parameter of the PRSV and PRSV2 equations. A list of given values  can be found in PRSV: An improved peng\u2014Robinson equation of state for pure compounds  and mixtures by R.  Stryjek and J. H. Vera.</p> <p><code>PRSV_KAPPA2</code> (default: None, type: Float)</p> <p>The second fitting parameter of the PRSV2 equation. A list of given values can be  found in PRSV2: A cubic equation of state for accurate vapor\u2014liquid equilibria  calculations by R.  Stryjek and J. H. Vera.</p> <p><code>PRSV_KAPPA3</code> (default: None, type: Float)</p> <p>The third fitting parameter of the PRSV2 equation. A list of given values can be  found in PRSV2: A cubic equation of state for accurate vapor\u2014liquid equilibria  calculations by R.  Stryjek and J. H. Vera.</p>"},{"location":"manual/saturation_pressure/","title":"Saturation pressure","text":"<p><code>ADSORBATE_SATURATION_PRESSURE</code> (default: None, type: String)</p> <p>Specifies the saturation pressure model used for the calculations. This keyword can take as many arguments as the number of input files provided. However, since the keyword <code>SATURATION_PRESSURE_FILE</code> can only take one argument, using the extrapolation method multiple times would produce the same results. </p> <p>Options: dubinin, amankwah, extrapolation, polynomial_water, peng_robinson, peng_robinson_extrapolation, prsv1_extrapolation, prsv2_extrapolation, widom_banuti, critical_isochore,</p> <p><code>SATURATION_PRESSURE_FILE</code> (default: None, type: String)</p> <p>The path towards the file that contains the saturation pressure data. This keyword  accepts only one argument. If the argument provided is local, the program will search its internal library for pre-made saturation pressure data file based on the  argument given to the <code>ADSORBATE</code> keyword. </p> <p><code>AMANKWAH_EXPONENT</code> (default: 3.0, type: Float)</p> <p>The exponent used for the amankwah method.</p>"},{"location":"manual/saturation_pressure/#computing-saturation-pressure-curves","title":"Computing saturation pressure curves","text":"<p><code>COMPUTE_SATURATION_PRESSURE_CURVE</code> (default: no, type: String)</p> <p>Specify if a stuartion pressure curve should be computed and saved using the first calculation method provided to <code>ADSORBATE_SATURATION_PRESSURE</code>.</p> <p>Options: yes, no</p> <p><code>SATURATION_PRESSURE_RANGE</code> (default: None, type: Tuple{Float})</p> <p>The range in which the saturation pressure is computed.</p> <p><code>NUMBER_SATURATION_PRESSURE_POINTS</code> (default: 50, type: Integer)</p> <p>The number of points used to for computing the saturation pressure curve.</p>"},{"location":"manual/units/","title":"Measurements units","text":"<p>RETMAP works with six main metrics: pressure, temperature, loading, potential, volume, and density. These metrics are stored and processed using the following units: MPa, K, mg/g, kJ/mol, ml/g, and kg/m3. As such, all values provided inside the configuration  file (e.g. <code>PREDICTION_TEMPERATURES</code>) should be provided using the aforementioned units. However, the user can specify inside the configuration file if the data read from the input files is provided in different units, in which case conversion factors are used  to reach the default units. Similarly, the user can specify the units used for writing the results. </p> <p>Currently, the following measurement units are supported:</p> <p><code>TEMPERATURE_UNITS</code>, <code>OUTPUT_TEMPERATURE_UNITS</code> (default: K, type: String)</p> <p>These keywords can be used to specify the measurement unit for temperature for the input and output files, respectively. The keyword <code>TEMPERATURE_UNITS</code> only applies to the data read from isobars and isosteres, and not to the input provided inside the  configuration file. Moreover, it accepts an entry for each input data file. The  keyword <code>OUTPUT_TEMPERATURE_UNITS</code> is used for both writing the results to files and plotting the results. However, the <code>retmap.out</code> file will still use the standard units. Only one output unit can be provided.</p> <p>Options: K, R</p> <p><code>PRESSURE_UNITS</code>, <code>OUTPUT_PRESSURE_UNITS</code> (default: MPa, type: String)</p> <p>These keywords can be used to specify the measurement unit for pressure for the input and output files, respectively. The keyword <code>PRESSURE_UNITS</code> only applies to the data read from isotherms and isosteres, and not to the input provided inside  the configuration file. Moreover, it accepts an entry for each input data file. The  keyword <code>OUTPUT_PRESSURE_UNITS</code> is used for both writing the results to files and plotting the results. However, the <code>retmap.out</code> file will still use the standard units. Only one output unit can be provided.</p> <p>Options: MPa, kPa, Pa, bar, atm, Torr, mmHg</p> <p><code>LOADING_UNITS</code>, <code>OUTPUT_LOADING_UNITS</code> (default: mg/g, type: String)</p> <p>These keywords can be used to specify the measurement unit for loading for the input and output files, respectively. The keyword <code>LOADING_UNITS</code> only applies to the data read from isotherms and isobars, and not to the input provided inside  the configuration file. Moreover, it accepts an entry for each input data file. The  keyword <code>OUTPUT_LOADING_UNITS</code> is used for both writing the results to files and plotting the results. However, the <code>retmap.out</code> file will still use the standard units. Only one output unit can be provided.</p> <p>Options: mg/g, g/kg, mol/kg, mmol/g, cm3/g, mm3/mg, dm3/kg, l/kg,  ml/g</p> <p><code>POTENTIAL_UNITS</code>, <code>OUTPUT_POTENTIAL_UNITS</code> (default: kJ/mol, type: String)</p> <p>These keywords can be used to specify the measurement unit for potential energy  for the input and output files, respectively. The keyword <code>POTENTIAL_UNITS</code> only  applies to the data read from characteristics. Moreover, it accepts an entry for each  input data file. The keyword <code>OUTPUT_POTENTIAL_UNITS</code> is used for both writing the  results to files and plotting the results. However, the <code>retmap.out</code> file will still  use the standard units. Only one output unit can be provided.</p> <p>Options: kJ/mol, J/mol</p> <p><code>VOLUME_UNITS</code>, <code>OUTPUT_VOLUME_UNITS</code> (default: ml/g, type: String)</p> <p>These keywords can be used to specify the measurement unit for volume for the input and output files, respectively. The keyword <code>VOLUME_UNITS</code> only applies to the data read from characteristics. Moreover, it accepts an entry for each input  data file. The keyword <code>OUTPUT_VOLUME_UNITS</code> is used for both writing the results to  files and plotting the results. However, the <code>retmap.out</code> file will still use the  standard units. Only one output unit can be provided.</p> <p>Options: ml/g, l/kg, cm3/g, dm3/kg</p> <p><code>OUTPUT_DENSITY_UNITS</code> (default: kg/m3, type: String)</p> <p>The keyword <code>OUTPUT_DENSITY_UNITS</code> is used for both writing the results to files and plotting the results. However, the <code>retmap.out</code> file will still use the standard units. Only one output unit can be provided.</p> <p>Options: kg/m3</p>"}]}